
1 :##########################################################################################################

Titre: Doxygen

LANCE Florian			Jeudi 30 Septembre 2010
MATHEOSSIAN Dimitri		Université Claude Bernard Lyon 1

2 :##########################################################################################################

PLAN

1: Introduction
	- Qu'est-ce que Doxygen?
	- Installation

2: Comment utiliser Doxygen ?
	-Syntaxe des commentaires
	-Balises communes
	-Fichier de configuration Doxygen
	-Générer la documentation	

3: Fonctionnalités diverses
	-Doxywizard
	-Rendu HTML
	-Graphiques

3 :#########################################################################################################

I:Introduction

	1) Qu'est-ce que Doxygen?

	-> un outil informatique libre permettant la génération de documentation à partir du code source du langage
	( C++, C, Java, Objective-C, Python ... )
	->il a été créé à la base avec DOC++ par Dimitri van Heesch
,puis a été réécrit  sous Linux et Mac OS en favorisant la portabilité
il fonctionne donc sur la plupart des systèmes Unix et est également
disponible sur Windows en version exécutable)

	-> il est gratuit et open-source sous la licence GNU (General Public License)
	-> la documentation est générée à partir de commentaires à
placer dans le code (à l'instar de Javadoc)
		-simplicité de mise en place
		-maintenance facile de la documentation
		-cohérence entre documentation et code
		-incitation des développeurs à commenter

4 :##########################################################################################################

	2) Installation

	Cette présentation se base sur la dernière version stable, la 1.7.1.
	Pour la récupérer:
		
		-Système Unix-like:
			Présent dans les dépôt
			sudo apt-get install doxygen (pour Debian et Ubuntu)

		-Autres systèmes:
http://www.stack.nl/~dimitri/doxygen/download.html#latestsrc
		
		-Windows: assistant d'installation

		-Mac OS:		

		- on peut également le récupérer gravce aux dépôts subversion
		http://sourceforge.net/scm/?type=svn&group_id=5971/

5 :################################################################

II: Comment utiliser Doxygen?

	1: Syntaxe des commentaires


	Style C avec deux *

	/**
	 * ... Documentation ...
	 *
	 */

	/**

	les * intermédiaires sont optionnels	

	*/

	Style C avec un !

	/*!
	 * ... Documentation ...
	 */

	Style C++ avec trois /

	///
	/// ... Documentation ...
	///

	Style C++ avec un !

	//!
	//! ... Documentation ...
	//!


	En respectant ces formes, on peut agencer les commentaires
	comme on le souhaite, par exemple:

	/////////////////////////////////////////////////
	/// ... text ...
	/////////////////////////////////////////////////


6 :##########################S######################################


	2: Position des commentaires:

	Les commentaires doxygen sont généralement positionnés
	juste avant le code qu'ils commentent:

	/*! Méthode affichage */
	void affichage();

	On peut également les placer à droite des paramètres
	et des membres de classes,structures,unions...




	2: Balises communes



En permettant l'intégration de la documentation directement dans le code sources, Doxygen permet de favoriser la cohérence entre la documentation et le code et de systématiser le comportement des développeurs afin qu'ils documentent le code qu'ils produisent.

Il est également possible d'extraire de la documentation à partir d’un code source non documenté au préalable, ce qui peut faciliter la compréhension d'un programme dont le code est compliqué.

De nombreux projets, tels que KDE, utilisent Doxygen pour créer la documentation de leur API. KDevelop intègre le support de Doxygen. De nombreux éditeurs de texte proposent des modes ou des scripts pour faciliter l'écriture des commentaires Doxygen et la génération de la documentation.

Les informations suivantes peuvent être extraites des sources :

    * prototype et documentation des fonctions, qu'elles soient locales, privées ou publiques, etc. ;
    * liste des fichiers inclus ;
    * documentation des structures de données ;
    * prototype et documentation des classes et leur hiérarchie ;
    * différents types de graphes : diagrammes de classe, de collaboration, d'appels, d'inclusion, etc. (pour générer certains de ces diagrammes, l'outil gratuit Dot est nécessaire) ;
    * un index de tous les identifiants ;
    * des fichiers sources annotés (par exemple avec les numéro de lignes) et navigables (par exemple avec HTML, avec lequel les identifiants renvoient vers la documentation associée).




##########################################################################################################



Le code ci-dessous illustre la manière dont Doxygen permet de documenter le code.

/**
 * La classe Time représente un instant.
 * @author Paul Hochon
 */
 class Time {
 
   /**
    * Constructeur.
    * Fixe l'instant à une valeur précise.
    * @param timemillis Millisecondes écoulées depuis le 1er janvier 1970
    */
   Time(int timemillis) {
     ...
   }
 
   /**
    * Récupère l'instant actuel.
    * @return Un instant correspondant à l'instant présent
    */
   static Time now() {
     ...
   }
 }

##########################################################################################################

\brief {texte}
fourni un descriptif de l'élément documenté
première occurrence = ligne de résumé
 
 * \brief Classe d'exemple A * \brief Voici un petit bout de code qui illustre l'utilisation de  * Doxygen au travers d'un code de classe C++. 


\author {texte}
nom d'un auteur du document
\since <date>
date de création 
\version <date | n° version>
date de dernière modification ou n° de version 
\note {texte}
 informations diverses
\see {texte}
renvoi vers un autre document





\mainpage {texte}
Le texte suivant dans le bloc sera affiché sur la première page de la documentation



\pre {texte}
Précondition
\post {texte}
Postrelation
\param[[in]|[out]|[in,out]] <nom-param> {description}
Informations relatives à un paramètre


/*!  
 * \pre monNom non vide. 
 * \post Construit un objet de type ClassB. 
 * * \param [in] monNom Nom de l'instance. */ 
ClassB(const string monNom); 


\return {description}
Informations sur le retour
\retval <valeur> {description}
Informations quand à la valeur de retour
\throw <TypeException> {description}
Informations quant à une exception pouvant être levée 

/*!
 * \return Retourne systématiquement NULL. * \retval NULL Valeur normale de retour.
 * * \throw Exception Retourne une exception si appelée une seconde fois.
 */
double maMethode();


\deprecated {description}
L'élément est déprécie : présent par compatibilité mais à ne plus utiliser. 
\bug {description}
L'élément est bugué.
\todo {description}
L'élément n'est pas encore (entièrement) réalisé.
\warning {description}
Avertissement quant à l'utilisation de cet élément. 

/*!
 * \todo Ecrire un code fonctionnel. * \warning La méthode de la classe A n'est pas la seule de ce nom finalement !
 */
double maMethode();
 
/*! 
 * \deprecated Ne pas l'utiliser sinon plantage assuré... * \bug BSOD
*/ 
MaStruct * maMethode();



##########################################################################################################
tags: 


    * \struct pour documenter une structure C.
    * \union pour documenter un union C.
    * \enum pour documenter un type énuméré.
    * \fn pour documenter une fonction.
    * \var pour documenter une variable / un typedef / un énuméré.
    * \def pour documenter un #define.
    * \typedef pour documenter la définition d'un type.
    * \file pour documenter un fichier.
    * \namespace pour documenter un namespace.
    * \package pour documenter un package Java.
    * \interface pour documenter une interface IDL.
    * \brief pour donner une description courte.
    * \class pour documenter classe.
    * \param pour documenter un paramètre de fonction/méthode.
    * \warning pour attirer l'attention.
    * \author pour donner le nom de l'auteur.
    * \return pour documenter les valeurs de retour d'une méthode/fonction.
    * \see pour renvoyer le lecteur vers quelque chose (une fonction, une classe, un fichier...).
    * \throws pour documenter les exceptions possiblement levées.
    * \version pour donner le numéro de version.
    * \since pour faire une note de version (ex : Disponible depuis ...).
    * \exception pour documenter une exception.
    * \deprecated pour spécifier qu'une fonction/méthode/variable... n'est plus utilisée.
    * \li pour faire une puce.
    * \todo pour faire un To Do (= "à faire")
    * \fixme pour faire un Fix Me (= "Réparez-moi").

##########################################################################################################
DoxyWizard est une interface graphique  permettant de configurer les options de génération de Doxygen
 et de lancer l'extraction de la documentation. Comme Doxygen, il est disponible sur différentes plates-formes.
