
1 :##########################################################################################################

Titre: Doxygen

LANCE Florian			Jeudi 30 Septembre 2010
MATHEOSSIAN Dimitri		Université Claude Bernard Lyon 1

2 :##########################################################################################################

PLAN

1: Introduction
	- Qu'est-ce que Doxygen?
	- Installation

2: Comment utiliser Doxygen ?
	-Syntaxe des commentaires
	-Balises communes
	-Fichier de configuration Doxygen
	-Générer la documentation	

3: Fonctionnalités diverses
	-Doxywizard
	-Rendu HTML
	-Graphiques

3 :#########################################################################################################

I:Introduction

	1) Qu'est-ce que Doxygen?

	-> un outil informatique libre permettant la génération de documentation à partir du code source du langage
	( C++, C, Java, Objective-C, Python ... )
	->il a été créé à la base avec DOC++ par Dimitri van Heesch
,puis a été réécrit  sous Linux et Mac OS en favorisant la portabilité
il fonctionne donc sur la plupart des systèmes Unix et est également
disponible sur Windows en version exécutable)

	-> il est gratuit et open-source sous la licence GNU (General Public License)
	-> la documentation est générée à partir de commentaires à
placer dans le code (à l'instar de Javadoc)
		-simplicité de mise en place
		-maintenance facile de la documentation
		-cohérence entre documentation et code
		-incitation des développeurs à commenter

4 :##########################################################################################################

	2) Installation

	Cette présentation se base sur la dernière version stable, la 1.7.1.
	Pour la récupérer:
		
		-Système Unix-like:
			Présent dans les dépôt
			sudo apt-get install doxygen (pour Debian et Ubuntu)

		-Autres systèmes: 
		tout est disponible sur
		http://www.stack.nl/~dimitri/doxygen/download.html#latestsrc
		
		-Windows: assistant d'installation doxygen-1.7.1-setup.exe

		-Mac OS:  déploiement de l'image Doxygen-1.7.1.dmg
	
		-Autres Unix-like: récupération des fichiers binaires 
		ou compilation des sources  doxygen-1.7.1.src.tar.gz

	

	 on peut également le récupérer gravce aux dépôts subversion
	http://sourceforge.net/scm/?type=svn&group_id=5971/

5 :################################################################

II: Comment utiliser Doxygen?

	1: Syntaxe des commentaires


	Style C avec deux *

	/**
	 * ... Documentation ...
	 *
	 */

	/**

	les * intermédiaires sont optionnels	

	*/

	Style C avec un !

	/*!
	 * ... Documentation ...
	 */

	Style C++ avec trois /

	///
	/// ... Documentation ...
	///

	Style C++ avec un !

	//!
	//! ... Documentation ...
	//!


	En respectant ces formes, on peut agencer les commentaires
	comme on le souhaite, par exemple:

	/////////////////////////////////////////////////
	/// 		DOCUMENTATION		      ///
	/////////////////////////////////////////////////


6 :##########################S######################################


	2: Position des commentaires:

	Les commentaires doxygen sont généralement positionnés
	juste avant le code qu'ils commentent:

	/*! Méthode affichage */
	void affichage();

	On peut également les placer à droite des paramètres
	et des membres de classes,structures,unions...


7 :##########################S######################################


	2: Balises communes

	Doxygen utilise des balises pour pouvoir générer la documentation.

	Il existe 2 notations différentes:
	\balise (façon Doxygen)
	@balise (façon JavaDoc)
 
	Règles: possibilité de mettre plusieurs balises par commentaire
		une seule balise par ligne
		 
8 :##########################S######################################

	\brief {brief description}
	
	Créé un courte description dans un bloc de documentation qui peut tenir sur une ou plusieurs lignes.
	
	
	exemple:

	* \brief Classe d'exemple test1
	* \brief Code d'exemple pour presenter l'utilisation de doxygen
	* dans un code de classe C++.
	
9 :##########################S######################################
	
	
	\mainpage {texte}
	Affiche le texte suivant sur la première page de la documentation.

	exemple:

	/*! \mainpage Page d'introduction du programme d'exemple d'utilisation de Doxygen
 	*
 	*
 	* Ceci est l'introduction du document.
 	* <img src="http://www.bo.infn.it/~medinace/figures/doxygen.png">
 	*/

10 :##########################S######################################
	
	Diverses informations sur le code:

	\author {texte}
	Auteur du document

	\since <date>
	Date de création du code

	\version <date | n° version>
	Date de dernière modification ou n° de version 

	\note {texte}
	 Informations diverses

	\see {texte}
	Renvoi vers un autre document


	exemple:

	/*!
 	* \author Florian LANCE <lance.florian@gmail.com>
 	* \author Dimitri MATHEOSSIAN <anima876@htomail.fr>
	 * \see http://www.stack.nl/~dimitri/doxygen/manual.html
 	*
 	* \note Partie libre qui peut accueillir n'importe quoi ou bien une licence.
 	*
	 * \since 2010/09/20
 	* \version 2010/09/27
 	*
 	*/

11 :##########################S######################################


    \return {description}
     Décrire le retour d'une fonction ou d'une méthode. 

    \retval <valeur> {description}
     Informations sur la valeur de retour
	
    \throw <TypeException> {description}
     Informations sur l'exception gérée

	/*!
 	    * \return Retourne le résultat de la division de MACRO_1 et MACRO_2
 	    * \retval MACRO_1/MACRO_2 valeur de retour
    	* \throw Exception Retourne une exception MACRO_2 est nul
 	    */
        float testDivision();


12 :##########################S######################################

    
	
   \pre {description}
    Description d'une précondition.	
   \post {description}
    Description d'une postcondition.
   \param[[in]|[out]|[in,out]] <nom-param> {description}
   Informations relatives à un paramètre.


   /*!  
    * \pre arg1 non nul 
    * \post Construit un objet de type ClassTest1. 
    * \param  [in] <arg1> Argument utilisé lors de l'initialisation d'un attribut de la classe.*/ 
    ClassTest1(int arg1);


13 :##########################S######################################



\bug {description}
Elément bugué: information sur le problème.

\deprecated {description}
Elément déprécié: uniquement présent pour des raisons de compatibilités, à ne pas utiliser.

\todo {description}
Elément non terminé: informations sur ce qu'il reste à faire.

\warning {description}
Avertissement sur l'utilisation de cet élément.


/*! 
* \deprecated méthode incompatible 
* \warning Ne pas mettre d'entier nul en argument
* \todo Gérer l'exception de l'argument nul en paramètre.
* \bug Segfault
*/ 
ClassTest1 methodeDepreciee(int arg1);



14 ::##########################S######################################

Il en existe beaucoup d'autres !

	\name \page \section \callgraph \attention ...

Liste complète: http://www.stack.nl/~dimitri/doxygen/commands.html


15 ::##########################S######################################

	3: Fichier de configuration Doxygen
	
	Il faut créer un fichier de configuration pour le projet, ce fichier va être utilisé pour générer la documentation du code source.
	La commande suivante permet de le créer :
		doxygen -g nomDuFichier
	(screenshot)
	On peut en faire de même en passant par l'interface graphique, il faut exécuter doxywizard.
	(screenshot)
	
	Les paramètres son listés et commentées dans le fichier de configuration, il faut
	les modifier, soit à partir du fichier, soit à partir de doxywizard.
	
	Voici une liste de quelques paramètres
		DOXYFILE_ENCODING = encodage du fichier config (exemple : UTF-8, ISO-88950-1)
		PROJECT_NAME = "Nom du projet"
		PROJECT_NUMBER = n°de révision
		OUTPUT_DIRECTORY = répertoire de sortie ou sera généré la documentation
		OUTPUT_LANGUAGE = la langue de la documentation (exemple : French)

		EXTRACT_ALL = YES | NO tout extraire ce qu'il y a dans le code
		EXTRACT_PRIVATE= YES | NO 
		EXTRACT_STATIC= YES | NO
		EXTRACT_LOCAL_CLASSES = YES | NO
		HIDE_UNDOC_MEMBERS= YES | NO
		HIDE_UNDOC_CLASSES= YES | NO
		
	Quand les paramètres sont correctes, on peut générer la documentation avec la commande :
	doxygen nomDuFichier
	Ou par doxywizard en cliquant sur "Run doxygen" dans l'onglet "Run".

##########################################################################################################

DoxyWizard est l'interface graphique (GUI) de Doxygen,
 
 Il y a deux modes pour paramétrer la génération de la documentation :
  - mode Wizard : simple et rapide, mais il propose peu d'option
  - mode Expert : permet de gérer toutes les variables du fichier de configuration (vu précédement)
  
On peut lancer la génération de documentation en cliquant sur "Run doxygen" dans l'onglet "Run".


##########################S######################################
 
Graphiques

Des graphe d'héritage sont créés par doxygen (si l'option est cochée), on peut obtenir un affichage tel que :
(screenshoot)

Doxygen utilise graphviz pour créer ces graphiques, et il est possible d'en obtenir de plus jolies en téléchargant graphviz :
http://www.graphviz.org/

Puis dans le mode Expert de DoxyWizard, il y a une partie "Dot" et une variable "DOT_PATH" qui permet de configurer le chemin jusqu'à graphviz.
(screenshoot)

Et on obient un des graphes :
(screenshoot)

